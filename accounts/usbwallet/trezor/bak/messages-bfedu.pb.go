// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-bfedu.proto

package bak

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Request: Ask device for public key corresponding to address_n path
// @start
// @next BfeduPublicKey
// @next Failure
type BfeduGetPublicKey struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduGetPublicKey) Reset()         { *m = BfeduGetPublicKey{} }
func (m *BfeduGetPublicKey) String() string { return proto.CompactTextString(m) }
func (*BfeduGetPublicKey) ProtoMessage()    {}
func (*BfeduGetPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{0}
}

func (m *BfeduGetPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduGetPublicKey.Unmarshal(m, b)
}
func (m *BfeduGetPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduGetPublicKey.Marshal(b, m, deterministic)
}
func (m *BfeduGetPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduGetPublicKey.Merge(m, src)
}
func (m *BfeduGetPublicKey) XXX_Size() int {
	return xxx_messageInfo_BfeduGetPublicKey.Size(m)
}
func (m *BfeduGetPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduGetPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduGetPublicKey proto.InternalMessageInfo

func (m *BfeduGetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *BfeduGetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains public key derived from device private seed
// @end
type BfeduPublicKey struct {
	Node                 *HDNodeType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Xpub                 *string     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BfeduPublicKey) Reset()         { *m = BfeduPublicKey{} }
func (m *BfeduPublicKey) String() string { return proto.CompactTextString(m) }
func (*BfeduPublicKey) ProtoMessage()    {}
func (*BfeduPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{1}
}

func (m *BfeduPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduPublicKey.Unmarshal(m, b)
}
func (m *BfeduPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduPublicKey.Marshal(b, m, deterministic)
}
func (m *BfeduPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduPublicKey.Merge(m, src)
}
func (m *BfeduPublicKey) XXX_Size() int {
	return xxx_messageInfo_BfeduPublicKey.Size(m)
}
func (m *BfeduPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduPublicKey proto.InternalMessageInfo

func (m *BfeduPublicKey) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *BfeduPublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

//*
// Request: Ask device for Bfedu address corresponding to address_n path
// @start
// @next BfeduAddress
// @next Failure
type BfeduGetAddress struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduGetAddress) Reset()         { *m = BfeduGetAddress{} }
func (m *BfeduGetAddress) String() string { return proto.CompactTextString(m) }
func (*BfeduGetAddress) ProtoMessage()    {}
func (*BfeduGetAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{2}
}

func (m *BfeduGetAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduGetAddress.Unmarshal(m, b)
}
func (m *BfeduGetAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduGetAddress.Marshal(b, m, deterministic)
}
func (m *BfeduGetAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduGetAddress.Merge(m, src)
}
func (m *BfeduGetAddress) XXX_Size() int {
	return xxx_messageInfo_BfeduGetAddress.Size(m)
}
func (m *BfeduGetAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduGetAddress.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduGetAddress proto.InternalMessageInfo

func (m *BfeduGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *BfeduGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains an Bfedu address derived from device private seed
// @end
type BfeduAddress struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	AddressHex           *string  `protobuf:"bytes,2,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduAddress) Reset()         { *m = BfeduAddress{} }
func (m *BfeduAddress) String() string { return proto.CompactTextString(m) }
func (*BfeduAddress) ProtoMessage()    {}
func (*BfeduAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{3}
}

func (m *BfeduAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduAddress.Unmarshal(m, b)
}
func (m *BfeduAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduAddress.Marshal(b, m, deterministic)
}
func (m *BfeduAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduAddress.Merge(m, src)
}
func (m *BfeduAddress) XXX_Size() int {
	return xxx_messageInfo_BfeduAddress.Size(m)
}
func (m *BfeduAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduAddress.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduAddress proto.InternalMessageInfo

func (m *BfeduAddress) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *BfeduAddress) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next BfeduTxRequest
// @next Failure
type BfeduSignTx struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	ToBin                []byte   `protobuf:"bytes,5,opt,name=toBin" json:"toBin,omitempty"`
	ToHex                *string  `protobuf:"bytes,11,opt,name=toHex" json:"toHex,omitempty"`
	Value                []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk     []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength           *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ChainId              *uint32  `protobuf:"varint,9,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TxType               *uint32  `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduSignTx) Reset()         { *m = BfeduSignTx{} }
func (m *BfeduSignTx) String() string { return proto.CompactTextString(m) }
func (*BfeduSignTx) ProtoMessage()    {}
func (*BfeduSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{4}
}

func (m *BfeduSignTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduSignTx.Unmarshal(m, b)
}
func (m *BfeduSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduSignTx.Marshal(b, m, deterministic)
}
func (m *BfeduSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduSignTx.Merge(m, src)
}
func (m *BfeduSignTx) XXX_Size() int {
	return xxx_messageInfo_BfeduSignTx.Size(m)
}
func (m *BfeduSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduSignTx proto.InternalMessageInfo

func (m *BfeduSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *BfeduSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *BfeduSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *BfeduSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *BfeduSignTx) GetToBin() []byte {
	if m != nil {
		return m.ToBin
	}
	return nil
}

func (m *BfeduSignTx) GetToHex() string {
	if m != nil && m.ToHex != nil {
		return *m.ToHex
	}
	return ""
}

func (m *BfeduSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BfeduSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *BfeduSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *BfeduSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *BfeduSignTx) GetTxType() uint32 {
	if m != nil && m.TxType != nil {
		return *m.TxType
	}
	return 0
}

//*
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next BfeduTxAck
type BfeduTxRequest struct {
	DataLength           *uint32  `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV           *uint32  `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR           []byte   `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS           []byte   `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduTxRequest) Reset()         { *m = BfeduTxRequest{} }
func (m *BfeduTxRequest) String() string { return proto.CompactTextString(m) }
func (*BfeduTxRequest) ProtoMessage()    {}
func (*BfeduTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{5}
}

func (m *BfeduTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduTxRequest.Unmarshal(m, b)
}
func (m *BfeduTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduTxRequest.Marshal(b, m, deterministic)
}
func (m *BfeduTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduTxRequest.Merge(m, src)
}
func (m *BfeduTxRequest) XXX_Size() int {
	return xxx_messageInfo_BfeduTxRequest.Size(m)
}
func (m *BfeduTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduTxRequest proto.InternalMessageInfo

func (m *BfeduTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *BfeduTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *BfeduTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *BfeduTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

//*
// Request: Transaction payload data.
// @next BfeduTxRequest
type BfeduTxAck struct {
	DataChunk            []byte   `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduTxAck) Reset()         { *m = BfeduTxAck{} }
func (m *BfeduTxAck) String() string { return proto.CompactTextString(m) }
func (*BfeduTxAck) ProtoMessage()    {}
func (*BfeduTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{6}
}

func (m *BfeduTxAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduTxAck.Unmarshal(m, b)
}
func (m *BfeduTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduTxAck.Marshal(b, m, deterministic)
}
func (m *BfeduTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduTxAck.Merge(m, src)
}
func (m *BfeduTxAck) XXX_Size() int {
	return xxx_messageInfo_BfeduTxAck.Size(m)
}
func (m *BfeduTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduTxAck proto.InternalMessageInfo

func (m *BfeduTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

//*
// Request: Ask device to sign message
// @start
// @next BfeduMessageSignature
// @next Failure
type BfeduSignMessage struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduSignMessage) Reset()         { *m = BfeduSignMessage{} }
func (m *BfeduSignMessage) String() string { return proto.CompactTextString(m) }
func (*BfeduSignMessage) ProtoMessage()    {}
func (*BfeduSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{7}
}

func (m *BfeduSignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduSignMessage.Unmarshal(m, b)
}
func (m *BfeduSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduSignMessage.Marshal(b, m, deterministic)
}
func (m *BfeduSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduSignMessage.Merge(m, src)
}
func (m *BfeduSignMessage) XXX_Size() int {
	return xxx_messageInfo_BfeduSignMessage.Size(m)
}
func (m *BfeduSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduSignMessage proto.InternalMessageInfo

func (m *BfeduSignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *BfeduSignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

//*
// Response: Signed message
// @end
type BfeduMessageSignature struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	AddressHex           *string  `protobuf:"bytes,3,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduMessageSignature) Reset()         { *m = BfeduMessageSignature{} }
func (m *BfeduMessageSignature) String() string { return proto.CompactTextString(m) }
func (*BfeduMessageSignature) ProtoMessage()    {}
func (*BfeduMessageSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{8}
}

func (m *BfeduMessageSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduMessageSignature.Unmarshal(m, b)
}
func (m *BfeduMessageSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduMessageSignature.Marshal(b, m, deterministic)
}
func (m *BfeduMessageSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduMessageSignature.Merge(m, src)
}
func (m *BfeduMessageSignature) XXX_Size() int {
	return xxx_messageInfo_BfeduMessageSignature.Size(m)
}
func (m *BfeduMessageSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduMessageSignature.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduMessageSignature proto.InternalMessageInfo

func (m *BfeduMessageSignature) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *BfeduMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BfeduMessageSignature) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type BfeduVerifyMessage struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	AddressHex           *string  `protobuf:"bytes,4,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BfeduVerifyMessage) Reset()         { *m = BfeduVerifyMessage{} }
func (m *BfeduVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*BfeduVerifyMessage) ProtoMessage()    {}
func (*BfeduVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{9}
}

func (m *BfeduVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfeduVerifyMessage.Unmarshal(m, b)
}
func (m *BfeduVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfeduVerifyMessage.Marshal(b, m, deterministic)
}
func (m *BfeduVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfeduVerifyMessage.Merge(m, src)
}
func (m *BfeduVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_BfeduVerifyMessage.Size(m)
}
func (m *BfeduVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BfeduVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BfeduVerifyMessage proto.InternalMessageInfo

func (m *BfeduVerifyMessage) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *BfeduVerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BfeduVerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *BfeduVerifyMessage) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

func init() {
	proto.RegisterType((*BfeduGetPublicKey)(nil), "hw.trezor.messages.bfedu.BfeduGetPublicKey")
	proto.RegisterType((*BfeduPublicKey)(nil), "hw.trezor.messages.bfedu.BfeduPublicKey")
	proto.RegisterType((*BfeduGetAddress)(nil), "hw.trezor.messages.bfedu.BfeduGetAddress")
	proto.RegisterType((*BfeduAddress)(nil), "hw.trezor.messages.bfedu.BfeduAddress")
	proto.RegisterType((*BfeduSignTx)(nil), "hw.trezor.messages.bfedu.BfeduSignTx")
	proto.RegisterType((*BfeduTxRequest)(nil), "hw.trezor.messages.bfedu.BfeduTxRequest")
	proto.RegisterType((*BfeduTxAck)(nil), "hw.trezor.messages.bfedu.BfeduTxAck")
	proto.RegisterType((*BfeduSignMessage)(nil), "hw.trezor.messages.bfedu.BfeduSignMessage")
	proto.RegisterType((*BfeduMessageSignature)(nil), "hw.trezor.messages.bfedu.BfeduMessageSignature")
	proto.RegisterType((*BfeduVerifyMessage)(nil), "hw.trezor.messages.bfedu.BfeduVerifyMessage")
}

func init() { proto.RegisterFile("messages-bfedu.proto", fileDescriptor_cb33f46ba915f15c) }

var fileDescriptor_cb33f46ba915f15c = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x6f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x12, 0x4f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22,
	0x60, 0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x44, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x75,
	0x62, 0x22, 0x52, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x4f, 0x0a, 0x0d, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x65, 0x78, 0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x48, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x48, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x22, 0x2c, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x41, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x4a, 0x0a, 0x11, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x4f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x78, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x78, 0x42, 0x3e, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73,
	0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x13, 0x54, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5a,
	0x02, 0x2e, 0x2f,
}
